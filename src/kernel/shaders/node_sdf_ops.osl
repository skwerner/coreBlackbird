/*
 * Copyright 2011-2020 Blender Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "stdcycles.h"
#include "vector2.h"
#include "node_sdf_util.h"

shader node_sdf_ops(float Value1 = 0.0,
                    float Value2 = 0.0,
                    float Radius1 = 0.0,
                    float Radius2 = 0.0,
                    float Count = 0.0,
                    string type = "union",
                    output float Distance = 0.0)
{
  float ret = 0.0;
  if (type == "round") {
    ret = sdf_op_round(Value1, Radius1);
  }
  else if (type == "blend") {
    ret = sdf_op_blend(Value1, Value2, Radius1);
  }
  else if (type == "onion") {
    ret = sdf_op_onion(Value1, Radius1, int(Count));
  }
  else if (type == "union") {
    ret = sdf_op_union(Value1, Value2);
  }
  else if (type == "intersection") {
    ret = sdf_op_intersection(Value1, Value2);
  }
  else if (type == "difference") {
    ret = sdf_op_difference(Value1, Value2);
  }
  else if (type == "union_smooth") {
    ret = sdf_op_union_smooth(Value1, Value2, Radius1);
  }
  else if (type == "intersection_smooth") {
    ret = sdf_op_intersection_smooth(Value1, Value2, Radius1);
  }
  else if (type == "difference_smooth") {
    ret = sdf_op_difference_smooth(Value1, Value2, Radius1);
  }
  Distance = ret;
}
